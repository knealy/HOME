Lecture: Tries
==============

* motivation:
   * supports Set or Dictionary ADT's when the keys are strings
     over some alphabet Sigma
   * but the none of the strings in the set can be a prefix of each other
     (not quite true)
   * good for implementing autocomplete (i.e. for texting, IDE's etc.)
   * used for spell checking

* standard trie

  { happy, day, cat, hot, dog, sun, hog }

  *--c--a--t
   |
   |-d--a--y
   | |
   |  \-o--g
   |
   |-h--a--p--p--y
   | |
   |  \-o--g
   |    |
   |     \-t
   |
   |-s--u--n

   Alternatively, can put the letters on the edges.

* code for building a standard trie:
    We represent each node in the trie with a hashtable
    mapping letters to subnodes.

    def build_trie(elements):
	T = dict()
	for str in elements:
		trie_insert(str, T)
	return T

    * height of T is equal to the length of longest string
    * the number of nodes in T is at most the sum of the 
      lengths of the strings
    * T has one leaf per string

    def trie_insert(str, T):
	if len(str) == 0:
	    return
	if not (str[0] in T):
	    T[str[0]] = dict()
	trie_insert(str[1:], T[str[0]])

    * time complexity for trie_insert? O(m * |Sigma|)


*** student exercise: write the trie_search function.
    solution:

    def trie_search(str, T):
	if len(str) == 0:
	    return True
	elif str[0] in T:
	    return trie_search(str[1:], T[str[0]])
	else:
	    return False

* compressed trie aka. Patricia trie

  fold sequences of single-child nodes into a single node

  *--cat
   |
   |-d--ay
   | |
   |  \-og
   |
   |-h--appy
   | |
   |  \-o--g
   |    |
   |     \-t
   |
   |-sun

   * number of nodes in T is O(s), but each node takes more space
   * this is only a win if the strings are already stored somewhere else
     and the trie nodes just store indexes into the primary storage.

* suffix trie

  All the strings in the trie are suffixes of the same string.
  Also known as a position tree.

  The suffix tree for "minimize"

  *--e
   |
   |-ze
   |
   |-i--ze
   | |
   | |-mize
   | |
   |  \-nimize
   |
   |-mi--ze
   | |
   |  \-nimize
   |
    \-nimize

   can use suffix tries to perform pattern matching.

* sorting using a trie
  

* relation to radix sort
